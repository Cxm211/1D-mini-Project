module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]  ,   // DIP switches on IO Shield
    output out[3],
    input in[2]
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst){
      fsmFA fsmFA;
    }
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    //if io_dip[0][7] is low, we test circuit automatically by FSM and clock
    if(io_dip[0][7] == 0){
       out[0] = fsmFA.a; 
       out[1] = fsmFA.b;
       out[2] = fsmFA.c;
    }else{// if io_dip[0][7] is high, we test circuit manually by switches
       out[0] = io_dip[0][0];
       out[1] = io_dip[0][1];
       out[2] = io_dip[0][2];
    }
	//Cout
    if (in[0]){
        io_led[0][1] = hFF;
    }else{
        io_led[0][1] = h00;
    }
	//S
    if(in[1]){
        io_led[0][0] = hFF;
    }
    else{
        io_led[0][0] = h00;
    }
  }
}