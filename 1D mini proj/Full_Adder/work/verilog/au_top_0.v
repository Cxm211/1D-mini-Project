/*
   This file was generated automatically by Alchitry Labs version 1.2.0.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip,
    output reg [2:0] customout,
    input [1:0] customin
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_switch_a;
  wire [1-1:0] M_switch_b;
  wire [1-1:0] M_switch_c;
  reg [1-1:0] M_switch_x;
  reg [1-1:0] M_switch_y;
  reg [1-1:0] M_switch_z;
  switch_1 switch (
    .x(M_switch_x),
    .y(M_switch_y),
    .z(M_switch_z),
    .a(M_switch_a),
    .b(M_switch_b),
    .c(M_switch_c)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_2 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    usb_tx = usb_rx;
    led = 8'h00;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_switch_x = io_dip[0+0+0-:1];
    M_switch_y = io_dip[0+1+0-:1];
    M_switch_z = io_dip[0+2+0-:1];
    customout[0+0-:1] = M_switch_a;
    customout[1+0-:1] = M_switch_b;
    customout[2+0-:1] = M_switch_c;
    if (customin[0+0-:1]) begin
      io_led[16+1+0-:1] = 8'hff;
    end
    if (customin[1+0-:1]) begin
      io_led[16+0+0-:1] = 8'hff;
    end
  end
endmodule
